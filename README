BRAHMA - Privilege elevation exploit for the Nintendo 3DS
=========================================================

  WTF is 'BRAHMA'?
  ----------------
  BRAHMA is a privilege elevation exploit that is based on reverse engineered
  code of a publicly available, 'commercial' exploit. With existing user mode
  code execution privileges (e.g. Ninjhax), it can be used to further
  elevate privileges to ARM9 pre-kernel / SVC mode.

  Also, "Brahma, the creator" is a god in hinduism that is often portrayed
  with four heads and arms (heh... so funny :\). 

  How to build:
  -------------
  - Download and install devkitARM (http://devkitpro.org/wiki/Getting_Started)
  - Open a shell and run make
  - Prebuilt binary releases are available at
    https://github.com/patois/Brahma/releases

  How to use:
  -----------
  - Run brahma.3dsx (using homebrew launcher) 
  - By default, the exploit will attempt to gain ARM11 kernel privileges before
    finally gaining ARM9 pre-kernel privileges (by performing a "firmlaunch")

    "Hotkeys" (press and hold during startup of BRAHMA):
    ----------------------------------------------------

    * LEFT  : Loads 'arm9payload.bin' from the root folder of the 3DS' SD card
              and executes it

    * RIGHT : Performs a reboot / firm launch of the 3DS system

    * NONE  : Displays a menu which allows payload files to be received via
              a WiFi network connection or loaded from the '/brahma' folder
              located in the root folder of the SD card

    In order to send payload files to the 3DS via a network connection,
    the Python script '/tools/client.py' can be used. Alternatively, netcat
    does the job as well.

      Syntax:
      -------
      client.py: 'python client.py <3DS ip> <filename>'	  
      netcat:    'nc <3DS ip> 80 < <filename>' 

      Examples:
      ---------  
      client.py: 'python client.py 10.0.0.5 payload.bin'
      netcat:    '10.0.0.5 80 < payload.bin'

  ARM9 payload must consist of valid ARM9 executable code and will be
  mapped to physical address 0x23F00000 during run-time. Its code should begin
  with a branch instruction at offset 0 and a 'placeholder' for a u32
  variable at offset 4, which will be filled by BRAHMA with a backup of
  the original ARM9 entry point of the FIRM header during runtime.

  Example programs that run in privileged ARM9 mode can be downloaded from
  https://github.com/patois/3DSProjects/tree/master/Brahma/

  The 'bootstrap' branch of archshift's Decrypt9 tool is another example of
  ARM9 payload that can be launched using this exploit (use 'make' to build
  the project, then rename the resulting .bin file to 'arm9payload.bin' and
  place it into the root folder of the 3DS' SD card). Decrypt9 for bootstrap
  can be downloaded from https://github.com/archshift/Decrypt9/tree/bootstrap

  Credits:
  --------
  - To 3dbrew.org and all its contributors for being such a great resource
  - To whomever initially found the vulnerabilities and wrote the publicly
    available exploit code
  - To everybody who's been working on porting this exploit and its various
    "bootstrap" branches to newer firmware versions and improving its stability
    (in particular yifanlu, yuriks and shinyquagsire23)
  - To everybody involved in creating libctru, Ninjhax and the Homebrew Menu

Disclaimer:
THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
OF SUCH DAMAGE.

  (c) 2015, patois
